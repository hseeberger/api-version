name: ci

on:
  push:
    branches:
      - main
    tags-ignore:
      - v*
  pull_request:
    branches:
      - main
  schedule:
    - cron: 0 4/12 * * *
  workflow_dispatch:
    inputs:
      nightly:
        description: use latest nightly
        required: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Note: dtolnay/rust-toolchain version will always be overriden by rust-toolchain.toml
  # since it declares `rustup default ...` not `rustup override ...`
  #
  # We can still reuse this job output to override (or not) appropriately
  # See:
  # https://github.com/dtolnay/rust-toolchain/issues/29#issuecomment-1412903426
  # https://github.com/dtolnay/rust-toolchain/pull/58/files
  toolchain:
    runs-on: ubuntu-latest
    env:
      nightly: ${{ (github.event.inputs.nightly == 'true' || github.event_name == 'schedule') && 'true' || '' }}
    outputs:
      channel: ${{ steps.vars.outputs.toolchain }}
    steps:
      - uses: actions/checkout@v4
      - id: vars
        env:
          toolchain_toml: "rust-toolchain.toml"
        run: |
          if [ -z $nightly ] && [ -f $toolchain_toml ]; then
            toolchain=$(grep channel $toolchain_toml | sed -r 's/channel = "(.*)"/\1/')
            echo "using toolchain $toolchain from rust-toolchain.toml"
          else
            toolchain='nightly'
            echo "using toolchain nightly"
            echo "also setting RUSTUP_TOOLCHAIN to nightly"
            echo "RUSTUP_TOOLCHAIN=nightly" >> "$GITHUB_ENV"
          fi
          echo "toolchain=$toolchain" >> "$GITHUB_OUTPUT"

  check:
    name: check
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: |
          rustup override set ${{needs.toolchain.outputs.channel}}
          just check

  fmt-check:
    name: fmt-check
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: "rustfmt --check"
        run: |
          rustup override set ${{needs.toolchain.outputs.channel}}
          rustup component add rustfmt
          just fmt-check

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      # Run clippy
      - name: clippy
        run: |
          rustup override set ${{needs.toolchain.outputs.channel}}
          rustup component add clippy
          just lint

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: |
          rustup override set ${{needs.toolchain.outputs.channel}}
          just coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
          fail_ci_if_error: true

      - name: Run tests
        run: just test
