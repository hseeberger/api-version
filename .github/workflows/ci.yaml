name: ci

on:
  push:
    branches:
      - main
    tags-ignore:
      - v*
  pull_request:
    branches:
      - main
  schedule:
    - cron: 0 4/12 * * *
  workflow_dispatch:
    inputs:
      nightly:
        description: use latest nightly
        required: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  toolchain:
    runs-on: ubuntu-latest
    env:
      nightly: ${{ (github.event.inputs.nightly == 'true' || github.event_name == 'schedule') && 'true' || '' }}
    outputs:
      toolchain: ${{ steps.vars.outputs.toolchain }}
    steps:
      - uses: actions/checkout@v4
      - id: vars
        env:
          toolchain_toml: "rust-toolchain.toml"
        run: |
          if [ -z $nightly ] && [ -f $toolchain_toml ]; then
            toolchain=$(grep channel $toolchain_toml | sed -r 's/channel = "(.*)"/\1/')
            echo "using toolchain $toolchain from rust-toolchain.toml"
            echo "not setting RUSTUP_TOOLCHAIN"
            echo "toolchain=" >> "$GITHUB_OUTPUT"
          else
            toolchain='nightly'
            echo "using toolchain nightly"
            echo "also setting RUSTUP_TOOLCHAIN to nightly"
            echo "toolchain=RUSTUP_TOOLCHAIN=nightly" >> "$GITHUB_OUTPUT"
          fi

  check:
    name: check
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: just check
        run: ${{needs.toolchain.outputs.toolchain}} just check

  fmt-check:
    name: fmt-check
    runs-on: ubuntu-latest
    needs: [toolchain, check]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: just fmt-check
        run: |
          rustup component add rustfmt
          ${{needs.toolchain.outputs.toolchain}} just fmt-check

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [toolchain, check]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: just lint
        run: |
          rustup component add clippy
          ${{needs.toolchain.outputs.toolchain}} just lint

  test:
    name: test
    runs-on: ubuntu-latest
    needs: [toolchain, check]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: just test
        run: ${{needs.toolchain.outputs.toolchain}} just test

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs: [toolchain, test]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: just coverage
        run: ${{needs.toolchain.outputs.toolchain}} just coverage

      - name: Check for Codecov secret
        id: secret-check
        run: |
          if [ -z ${{ secrets.CODECOV_TOKEN }} ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
            echo "Codecov secret is available"
          else
            echo "available=false" >> $GITHUB_OUTPUT;
            echo "No Codecov secret found"
          fi

      - name: Upload coverage to Codecov
        if: ${{ steps.secret-check.outputs.available != 'true' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
          fail_ci_if_error: false
